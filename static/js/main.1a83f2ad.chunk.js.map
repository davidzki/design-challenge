{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","colorBox","randomName","business","fonts","name","names","Math","floor","random","length","setState","businesses","colorhash","color","toString","toUpperCase","getRandomColor","getRandomName","getRandomBiz","getRandomFont","_this2","fetch","then","items","json","data","map","font","react_default","a","createElement","key","family","_this3","className","onClick","randomizeAll","id","style","background","toLowerCase","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a83f2ad.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport names from './names.json';\nimport businesses from './business.json';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colorBox: '',\n      randomName: '',\n      business: '',\n      fonts: '',\n    }\n    \n  }\n\n  getRandomName() {\n    var name = names[Math.floor(Math.random()*names.length)];\n    this.setState(\n      {\n        randomName: name,\n      }\n    )\n  }\n\n  getRandomBiz() {\n    var business = businesses[Math.floor(Math.random()*businesses.length)];\n    this.setState({\n      business: business,\n    })\n  }\n\n  getRandomColor() {\n    var colorhash = '#';\n    var color = colorhash += Math.floor(Math.random()*16777215).toString(16).toUpperCase();\n\n    this.setState(\n      {\n        colorBox: color,\n      }\n    )\n  }\n\n  componentDidMount() {\n    this.getRandomColor();\n    this.getRandomName();\n    this.getRandomBiz();\n    this.getRandomFont();\n  }\n\n  \n  randomizeAll() {\n    this.getRandomColor();\n    this.getRandomName();\n    this.getRandomBiz();\n    this.getRandomFont();\n  }\n\n  getRandomFont() {\n\n    fetch('https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyAeFUacTE8P1Dn6APjr-1FLpF5y_61MNwA')\n    .then(items => {\n      return items.json();\n    }).then(data => {\n      let fonts = data.items.map((font) => {\n        return(\n          <span key={font.items}>\n          {font.family}\n          </span>\n        )\n      })\n      this.setState({fonts: fonts[Math.floor(Math.random()*fonts.length)]});\n    })\n\n  }\n\n  render() {\n\n    return (\n      <div>\n      <div className=\"top__desc\">\n        <div className=\"challenge\">Challenge yourself<br />by clicking the dice!</div>\n        <div onClick={() => this.randomizeAll()}><i className=\"fas fa-dice-d6\"></i></div>\n      </div>\n      <div id=\"main\">\n        <div className=\"box name\">\n          <div className=\"desc\">          \n            <i className=\"fas fa-signature\"></i>\n            <div>Name</div>\n          </div>\n          <h2>{this.state.randomName}</h2>\n          <button className=\"btn\" onClick={() => this.getRandomName()}>NEW NAME</button>\n        </div>\n        <div className=\"box business\">\n          <div className=\"desc\">          \n              <i className=\"far fa-address-card\"></i>\n              <div>Business</div>\n          </div>\n          <p>{this.state.business}</p>\n          <button className=\"btn\" onClick={() => this.getRandomBiz()}>NEW BUSINESS</button>\n        </div>\n        <div className=\"box font\">\n          <div className=\"desc\">          \n              <i className=\"fas fa-font\"></i>\n              <div>Font</div>\n          </div>\n          <div>{this.state.fonts}</div>\n          <button className=\"btn\" onClick={() => this.getRandomFont()}>NEW FONT</button>\n        </div>\n        <div className=\"box color\">\n          <div className=\"desc\">          \n              <i className=\"fas fa-palette\"></i>\n              <div>Brand color</div>\n          </div>\n          <div className=\"color__box\" style={{background: this.state.colorBox}}></div>\n          <p>{this.state.colorBox}</p>\n          <button className=\"btn\" onClick={() => this.getRandomColor()}>NEW COLOR</button>\n        </div>\n      </div>\n\n      <div id=\"brief\" className=\"box\">\n        <div className=\"desc\">\n          <i className=\"far fa-file-alt\"></i>\n          <div>Brief</div>\n        </div>\n      <p>Your mission is to design a brand by the name of <b>{this.state.randomName}</b> that work with <i>{this.state.business.toLowerCase()}</i>. The brand color is {this.state.colorBox} and you are allowed to use <b>{this.state.fonts}</b> as font.</p>\n\n      </div>\n      <p className=\"by\">Made by davidzki </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}